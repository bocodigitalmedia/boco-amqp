// Generated by CoffeeScript 1.6.3
(function() {
  var Message,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Message = (function() {
    function Message(properties) {
      if (properties == null) {
        properties = {};
      }
      this.messageId = properties.messageId;
      this.routingKey = properties.routingKey;
      this.expiration = properties.expiration;
      this.userId = properties.userId;
      this.mandatory = properties.mandatory;
      this.deliveryMode = properties.deliveryMode;
      this.immediate = properties.immediate;
      this.contentType = properties.contentType;
      this.contentEncoding = properties.contentEncoding;
      this.priority = properties.priority;
      this.correlationId = properties.correlationId;
      this.replyTo = properties.replyTo;
      this.timestamp = properties.timestamp;
      this.type = properties.type;
      this.appId = properties.appId;
      this.payload = properties.payload;
      this.setHeaders(properties.header);
      this.setDefaults();
    }

    Message.prototype.setDefaults = function() {
      if (this.mandatory == null) {
        this.mandatory = false;
      }
      if (this.deliveryMode == null) {
        this.deliveryMode = 1;
      }
      return this.immediate != null ? this.immediate : this.immediate = false;
    };

    Message.prototype.setHeaders = function(headers) {
      if (headers == null) {
        headers = {};
      }
      return this.headers = headers;
    };

    return Message;

  })();

  Message.IncomingMessage = (function(_super) {
    __extends(IncomingMessage, _super);

    function IncomingMessage(properties) {
      if (properties == null) {
        properties = {};
      }
      this.channel = properties.channel;
      this.deliveryTag = properties.deliveryTag;
      this.consumerTag = properties.consumerTag;
      this.exchangeName = properties.exchangeName;
      this.redelivered = properties.redelivered;
      IncomingMessage.__super__.constructor.call(this, properties);
    }

    IncomingMessage.prototype.ack = function() {
      return this.channel.ack(this);
    };

    IncomingMessage.prototype.nack = function(options) {
      return this.channel.nack(this, options);
    };

    return IncomingMessage;

  })(Message);

  module.exports = Message;

}).call(this);

/*
//@ sourceMappingURL=Message.map
*/
