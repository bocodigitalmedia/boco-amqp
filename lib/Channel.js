// Generated by CoffeeScript 1.6.3
(function() {
  var Async, Channel;

  Async = require('async');

  Channel = (function() {
    function Channel(properties) {
      if (properties == null) {
        properties = {};
      }
      this.wrapped = properties.wrapped;
    }

    Channel.prototype.assertExchange = function(exchange, callback) {
      return this.wrapped.assertExchange(exchange.name, exchange.type, exchange.options, function(error) {
        return callback(error);
      });
    };

    Channel.prototype.assertQueue = function(queue, callback) {
      return this.wrapped.assertQueue(queue.name, queue.options, function(error) {
        return callback(error);
      });
    };

    Channel.prototype.bindQueue = function(binding, callback) {
      return this.wrapped.bindQueue(binding.queueName, binding.exchangeName, binding.pattern, binding["arguments"], function(error) {
        return callback(error);
      });
    };

    Channel.prototype.assertSchema = function(schema, callback) {
      var assertExchange, assertExchanges, assertQueue, assertQueues, bindQueue, bindQueues, channel, steps;
      channel = this;
      assertExchange = function(exchange, done) {
        return channel.assertExchange(exchange, done);
      };
      assertQueue = function(queue, done) {
        return channel.assertQueue(queue, done);
      };
      bindQueue = function(binding, done) {
        return channel.bindQueue(binding, done);
      };
      assertExchanges = function(done) {
        return Async.eachSeries(schema.exchanges, assertExchange, done);
      };
      assertQueues = function(done) {
        return Async.eachSeries(schema.queues, assertQueue, done);
      };
      bindQueues = function(done) {
        return Async.eachSeries(schema.queueBindings, bindQueue, done);
      };
      steps = [assertExchanges, assertQueues, bindQueues];
      return Async.series(steps, callback);
    };

    Channel.prototype.close = function(callback) {
      return this.wrapped.close(function(error) {
        return callback(error);
      });
    };

    return Channel;

  })();

  module.exports = Channel;

}).call(this);

/*
//@ sourceMappingURL=Channel.map
*/
