// Generated by CoffeeScript 1.6.3
(function() {
  var Async, Channel, getOptionsForPublish, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Async = require('async');

  getOptionsForPublish = function(message) {
    var key, options, value;
    options = {
      messageId: message.messageId,
      expiration: message.expiration,
      userId: message.userId,
      mandatory: message.mandatory,
      persistent: message.persistent,
      immediate: message.immediate,
      contentType: message.contentType,
      contentEncoding: message.contentEncoding,
      priority: message.priority,
      correlationId: message.correlationId,
      replyTo: message.replyTo,
      timestamp: message.timestamp,
      type: message.type,
      headers: message.headers
    };
    for (key in options) {
      if (!__hasProp.call(options, key)) continue;
      value = options[key];
      if (value === void 0) {
        delete options[key];
      }
    }
    return options;
  };

  Channel = (function() {
    function Channel(properties) {
      if (properties == null) {
        properties = {};
      }
      this.wrapped = properties.wrapped;
    }

    Channel.prototype.assertExchange = function(exchange, callback) {
      return this.wrapped.assertExchange(exchange.name, exchange.type, exchange.options, function(error) {
        return callback(error);
      });
    };

    Channel.prototype.assertQueue = function(queue, callback) {
      return this.wrapped.assertQueue(queue.name, queue.options, function(error) {
        return callback(error);
      });
    };

    Channel.prototype.bindQueue = function(binding, callback) {
      return this.wrapped.bindQueue(binding.queueName, binding.exchangeName, binding.pattern, binding["arguments"], function(error) {
        return callback(error);
      });
    };

    Channel.prototype.assertSchema = function(schema, callback) {
      var assertExchange, assertExchanges, assertQueue, assertQueues, bindQueue, bindQueues, channel, steps;
      channel = this;
      assertExchange = function(exchange, done) {
        return channel.assertExchange(exchange, done);
      };
      assertQueue = function(queue, done) {
        return channel.assertQueue(queue, done);
      };
      bindQueue = function(binding, done) {
        return channel.bindQueue(binding, done);
      };
      assertExchanges = function(done) {
        return Async.eachSeries(schema.exchanges, assertExchange, done);
      };
      assertQueues = function(done) {
        return Async.eachSeries(schema.queues, assertQueue, done);
      };
      bindQueues = function(done) {
        return Async.eachSeries(schema.queueBindings, bindQueue, done);
      };
      steps = [assertExchanges, assertQueues, bindQueues];
      return Async.series(steps, callback);
    };

    Channel.prototype.publish = function(exchangeName, message) {
      var options;
      options = getOptionsForPublish(message);
      return this.wrapped.publish(exchangeName, message.routingKey, content, options);
    };

    Channel.prototype.close = function(callback) {
      return this.wrapped.close(function(error) {
        return callback(error);
      });
    };

    return Channel;

  })();

  Channel.ConfirmChannel = (function(_super) {
    __extends(ConfirmChannel, _super);

    function ConfirmChannel() {
      _ref = ConfirmChannel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ConfirmChannel.prototype.publish = function(exchangeName, message, callback) {
      var content, key, options;
      key = message.routingKey;
      content = message.payload;
      options = getOptionsForPublish(message);
      return this.wrapped.publish(exchangeName, key, content, options, callback);
    };

    return ConfirmChannel;

  })(Channel);

  module.exports = Channel;

}).call(this);

/*
//@ sourceMappingURL=Channel.map
*/
