// Generated by CoffeeScript 1.6.3
(function() {
  var Async, Channel, getOptionsForPublish,
    __hasProp = {}.hasOwnProperty;

  Async = require('async');

  getOptionsForPublish = function(message) {
    var key, options, value;
    options = {
      messageId: message.messageId,
      expiration: message.expiration,
      userId: message.userId,
      mandatory: message.mandatory,
      persistent: message.persistent,
      immediate: message.immediate,
      contentType: message.contentType,
      contentEncoding: message.contentEncoding,
      priority: message.priority,
      correlationId: message.correlationId,
      replyTo: message.replyTo,
      timestamp: message.timestamp,
      type: message.type,
      headers: message.headers
    };
    for (key in options) {
      if (!__hasProp.call(options, key)) continue;
      value = options[key];
      if (value === void 0) {
        delete options[key];
      }
    }
    return options;
  };

  Channel = (function() {
    function Channel(properties) {
      if (properties == null) {
        properties = {};
      }
      this.wrapped = properties.wrapped;
    }

    Channel.prototype.assertExchange = function(exchange, callback) {
      var done, x;
      x = exchange;
      done = function(error) {
        return callback(error, exchange);
      };
      return this.wrapped.assertExchange(x.name, x.type, x.options, done);
    };

    Channel.prototype.assertQueue = function(queue, callback) {
      var done, q;
      q = queue;
      done = function(error) {
        return callback(error, queue);
      };
      return this.wrapped.assertQueue(q.name, q.options, done);
    };

    Channel.prototype.bindQueue = function(binding, callback) {
      var b, done;
      b = binding;
      done = function(error) {
        return callback(error, binding);
      };
      return this.wrapped.bindQueue(b.queueName, b.exchangeName, b.pattern, b["arguments"], done);
    };

    Channel.prototype.assertSchema = function(schema, callback) {
      var assertExchange, assertExchanges, assertQueue, assertQueues, bindQueue, bindQueues, steps;
      assertExchange = this.assertExchange.bind(this);
      assertQueue = this.assertQueue.bind(this);
      bindQueue = this.bindQueue.bind(this);
      assertExchanges = function(done) {
        return Async.eachSeries(schema.exchanges, assertExchange, done);
      };
      assertQueues = function(done) {
        return Async.eachSeries(schema.queues, assertQueue, done);
      };
      bindQueues = function(done) {
        return Async.eachSeries(schema.queueBindings, bindQueue, done);
      };
      steps = [assertExchanges, assertQueues, bindQueues];
      return Async.series(steps, callback);
    };

    Channel.prototype.publish = function(exchangeName, message, callback) {
      var content, done, key, options;
      key = message.routingKey;
      content = message.payload;
      options = getOptionsForPublish(message);
      done = function(error) {
        return callback(error, message);
      };
      console.log("publishing to " + exchangeName);
      console.log("message:", message);
      console.log("options:", options);
      if (callback != null) {
        return this.wrapped.publish(exchangeName, key, content, options, done);
      } else {
        return this.wrapped.publish(exchangeName, key, content, options);
      }
    };

    return Channel;

  })();

  module.exports = Channel;

}).call(this);

/*
//@ sourceMappingURL=Channel.map
*/
